
string = '<p class="foo bar class_2" id="baz" >Hello</p>'

string.match(regex)
string.match(regex).captures.first

:name
regex_name = /<(\w*?)[\s|>]/

:text
regex = />(.*?)<\//

:class
regex = /class="(.*?)"/

:id
regex = /id="(.*?)"/

///////////////////////////

<html>
  <head>
    <title></title>
  </head>
  <body>
    <div class="foo">
      <h1>
        Some Text
      </h1>
      <p></p>
    </div>
  </body>
</html>

      html
        |
  [head, body]
  |           |
[title]     [div]
                  |
                [h1, p]

1. stack = [html]
2, stack = [head, body]
3. stack = [head, div]
4. stack = [head, h1, p]
5. srtack = [head, h1]
6. stack = [head]
7. stack = [title]
8. finsih beacause stack is empty
6. return count_array =[array] = howe many nodes and what tyoe of nodes

"<html><head><div><div></div><li></li></div></head></html>"

************ Option 1 - Stack **********

tags = ["<html>", head, div]
node div
node li

****** Option 2 - Recursive ******

    first_tag = 'whole text'.match(regex for matching the whole first tag) --> "<html>"
    closing_tag = first_tag + "/" after <

    look for closing tag
      if you see another first_tag, then look for two closing tags
    end

parent = node

arr = <html>, <hea

arr.each do |tag|

  parse(tag)
  if !imm_closeingtag
   
  stack << head
  node.children<< <head>
  node.children.each do |child|
   
  node.parent = parent
   
  else
  node = node.parent
  end



******** read lines **********

read = <head><title>This is a test page</title></head><body><div class="top-div">I'm an outer div!!!<div class="inner-div"</div></div></body></html>

readlines = [, <head>, 
  <title>, This is a test page,
  </title>, </head>]

root document
node = html


node = docment
parent =node
file = <html><head><title></title></head><body><div></div></body>

build tree

  arr

    read_tag(tag)

    stack << tag

    node.children << tag


    node = node.chidren[-1]
    node.parent = parent
    delete file(tag.length)

    if closing tag
      node = node.parent #parnt stays updated
      delete file(tag)

/\s+/, ""\]





          html
            |
          [head, body]



node renderer

  def render(node)

    stack = []
    stack << node

    while stack.not_empty?

      node = stack.pop

      node.children.each do |child|
        stack<<child

      if children.is empty?
        mpde = node.parent


******* Tree ************

node name:html class id children



















